package Customer

import (
	"botTtrader/Items"
	"botTtrader/Users"
	"database/sql"
	"fmt"
	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
	"sort"
	"strconv"
	"strings"
)

type Pair struct {
	Key   *Items.Item
	Value int
}

func MyCart(bh *th.BotHandler, db *sql.DB) {
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()
		user, err := Users.GetByID(callback.From.ID, db)
		if err != nil {
			// Handle error (e.g., log it or notify the user)
			bot.SendMessage(ctx, &telego.SendMessageParams{
				ChatID: chatID,
				Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			})
			return err
		}
		ShowCartPage(0, user.ShoppingCart, bot, ctx, chatID, messageID)
		return err
	}, th.CallbackDataEqual("myCart"))

	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()
		user, err := Users.GetByID(callback.From.ID, db)
		itemPage, err := strconv.ParseInt(strings.Split(callback.Data, " ")[1], 10, 64)
		if err != nil {
			errMsg(bot, chatID)
		}
		ShowCartPage(int(itemPage), user.ShoppingCart, bot, ctx, chatID, messageID)
		return nil
	}, th.CallbackDataContains("cartPage"))
}

func AddItemToCart(bh *th.BotHandler, db *sql.DB) {
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		user, err := Users.GetByID(callback.From.ID, db)
		messageID := callback.Message.GetMessageID()
		itemID, _ := strconv.ParseInt(strings.Split(callback.Data, " ")[1], 10, 64)
		if err != nil {
			errMsg(bot, chatID)
		}
		item, _ := Items.GetByID(itemID, db)
		user.AddToCart(item, 1)
		kb := tu.InlineKeyboard([]telego.InlineKeyboardButton{{Text: "–ó–∞–∫—Ä—ã—Ç—å", CallbackData: "deleteThis"}})
		bot.EditMessageText(ctx, &telego.EditMessageTextParams{ReplyMarkup: kb, MessageID: messageID, ChatID: chatID, Text: fmt.Sprintf("–¢–æ–≤–∞—Ä: %v –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", item.Name)})
		Users.Save(user, db)
		return nil
	}, th.CallbackDataContains("addToCart"))
}

func ClearCart(bh *th.BotHandler, db *sql.DB) {
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()
		user, _ := Users.GetByID(callback.From.ID, db)
		user.ShoppingCart = make(map[*Items.Item]int)
		Users.Save(user, db)
		kb := tu.InlineKeyboard([]telego.InlineKeyboardButton{{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: "myCart"}})
		bot.EditMessageText(ctx, &telego.EditMessageTextParams{ReplyMarkup: kb, MessageID: messageID, ChatID: chatID, Text: "–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞"})
		return nil
	}, th.CallbackDataEqual("clearCart"))
}

func CartItem(bh *th.BotHandler, db *sql.DB) {
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		bot := ctx.Bot()
		callback := update.CallbackQuery
		itemID, _ := strconv.ParseInt(strings.Split(callback.Data, " ")[1], 10, 64)
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		user, _ := Users.GetByID(callback.From.ID, db)
		item, _ := Items.GetByID(itemID, db)
		quantity := 0
		for existingItem, quan := range user.ShoppingCart {
			if existingItem.ID == item.ID {
				quantity = quan
			}
		}
		btns := []telego.InlineKeyboardButton{
			{Text: "–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", CallbackData: fmt.Sprintf("changeQuantity %v", item.ID)},
			{Text: "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", CallbackData: fmt.Sprintf("deleteItemInCart %v", item.ID)},
			{Text: "–ó–∞–∫—Ä—ã—Ç—å", CallbackData: "deleteThis"},
		}
		kb := tu.InlineKeyboard(btns)
		bot.SendMessage(ctx, &telego.SendMessageParams{ReplyMarkup: kb, ChatID: chatID, Text: fmt.Sprintf("–ò–Ω—Ñ–æ –æ —Ç–æ–≤–∞—Ä–µ:\n%v\n–¢–∏–ø:%v\n–û–ø–∏—Å–∞–Ω–∏–µ:\n%v\n–°—Ç–æ–∏–º–æ—Å—Ç—å: %v ‚ÇΩ\n–í –∫–æ—Ä–∑–∏–Ω–µ:%v —à—Ç.", item.Name, item.Type, item.Description, item.Price, quantity)})
		return nil
	}, th.CallbackDataContains("cartItem"))
}

func DeleteItemInCart(bh *th.BotHandler, db *sql.DB) {
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		bot := ctx.Bot()
		callback := update.CallbackQuery
		itemID, _ := strconv.ParseInt(strings.Split(callback.Data, " ")[1], 10, 64)
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()
		user, _ := Users.GetByID(callback.From.ID, db)
		needItem, _ := Items.GetByID(itemID, db)
		cart := user.ShoppingCart
		for item, _ := range cart {
			if item.ID == needItem.ID {
				delete(user.ShoppingCart, item)
			}
		}
		Users.Save(user, db)
		bot.EditMessageText(ctx, &telego.EditMessageTextParams{ReplyMarkup: tu.InlineKeyboard([]telego.InlineKeyboardButton{{Text: "–ó–∞–∫—Ä—ã—Ç—å", CallbackData: "deleteThis"}}), MessageID: messageID, ChatID: chatID, Text: fmt.Sprintf("–¢–æ–≤–∞—Ä %v —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", needItem.Name)})
		return nil
	}, th.CallbackDataContains("deleteItemInCart"))
}

func ShowCartPage(itemPage int, items map[*Items.Item]int, bot *telego.Bot, ctx *th.Context, id telego.ChatID, messageID int) {
	backBtn := telego.InlineKeyboardButton{
		Text:         "üîô –ù–∞–∑–∞–¥",
		CallbackData: "customerMenu",
	}

	if len(items) == 0 {
		bot.EditMessageText(ctx, &telego.EditMessageTextParams{
			ReplyMarkup: tu.InlineKeyboard([]telego.InlineKeyboardButton{backBtn}),
			MessageID:   messageID,
			ChatID:      id,
			Text:        "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...\n–ù–æ —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—åüòÅ",
		})
		return
	}

	const itemsPerPage = 5

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞–ø—É –≤ —Å—Ä–µ–∑ –ø–∞—Ä –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID
	type Pair struct {
		Key   *Items.Item
		Value int
	}

	allPairs := make([]Pair, 0, len(items))
	for item, quantity := range items {
		allPairs = append(allPairs, Pair{item, quantity})
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é ID
	sort.Slice(allPairs, func(i, j int) bool {
		return allPairs[i].Key.ID < allPairs[j].Key.ID
	})

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
	maxPage := (len(allPairs) - 1) / itemsPerPage

	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	if itemPage < 0 {
		itemPage = 0
	} else if itemPage > maxPage {
		itemPage = maxPage
	}

	// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	start := itemPage * itemsPerPage
	end := start + itemsPerPage
	if end > len(allPairs) {
		end = len(allPairs)
	}
	pagePairs := allPairs[start:end]

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
	var keyboardRows [][]telego.InlineKeyboardButton
	for _, pair := range pagePairs {
		item := pair.Key
		quantity := pair.Value
		row := []telego.InlineKeyboardButton{
			{
				Text:         fmt.Sprintf("%s - %d —à—Ç. | %d ‚ÇΩ", item.Name, quantity, int(item.Price)*quantity),
				CallbackData: fmt.Sprintf("cartItem %v", item.ID),
			},
		}
		keyboardRows = append(keyboardRows, row)
	}

	var navButtons []telego.InlineKeyboardButton
	var pgDownBtn string
	if itemPage > 0 {
		pgDownBtn = fmt.Sprintf("cartPage %v", itemPage-1)
	} else {
		pgDownBtn = "pageItemErr"
	}
	navButtons = append(navButtons, telego.InlineKeyboardButton{
		Text:         "<< –ù–∞–∑–∞–¥",
		CallbackData: pgDownBtn,
	})
	var pgUpBtn string
	if itemPage < maxPage {
		pgUpBtn = fmt.Sprintf("cartPage %v", itemPage+1)
	} else {
		pgUpBtn = "pageItemErr"
	}
	navButtons = append(navButtons, telego.InlineKeyboardButton{
		Text:         "–í–ø–µ—Ä–µ–¥ >>",
		CallbackData: pgUpBtn,
	})

	if len(navButtons) > 0 {
		keyboardRows = append(keyboardRows, navButtons)
	}

	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{Text: "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", CallbackData: "makeOrder"},
	})
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{Text: "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", CallbackData: "clearCart"},
	})
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{backBtn})

	_, _ = bot.EditMessageText(ctx, &telego.EditMessageTextParams{
		ChatID:      id,
		MessageID:   messageID,
		Text:        fmt.Sprintf("–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ ‚Äì %d —Ç–æ–≤–∞—Ä–æ–≤\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ %d/%d\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", len(items), itemPage+1, maxPage+1),
		ReplyMarkup: &telego.InlineKeyboardMarkup{InlineKeyboard: keyboardRows},
	})
}
