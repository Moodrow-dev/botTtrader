package Customer

import (
	"botTtrader/Users"
	"botTtrader/Utils"
	"database/sql"
	"fmt"
	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
	"log"
	"regexp"
	"strings"
)

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const (
	stateNormal = iota
	stateEditingName
	stateEditingPhone
	stateEditingAddress
)

// Cabinet –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
func Cabinet(bh *th.BotHandler, db *sql.DB) {
	if bh == nil || db == nil {
		log.Println("Nil handler or db in Cabinet")
		return
	}

	// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–±–∏–Ω–µ—Ç–∞
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		if update.CallbackQuery == nil || update.CallbackQuery.Message == nil {
			log.Println("Nil CallbackQuery, Message or From in Cabinet handler")
			return nil
		}

		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()

		user, err := Users.GetByID(callback.From.ID, db)
		if err != nil {
			log.Printf("Failed to get user: %v", err)
			return err
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å markdown
		text := fmt.Sprintf(
			"*–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:*\n\n"+
				"*–§–ò–û:* %s\n"+
				"*Username:* @%s\n"+
				"*–°–∫–∏–¥–∫–∞:* %d%%\n"+
				"*–¢–µ–ª–µ—Ñ–æ–Ω:* %s\n"+
				"*–ê–¥—Ä–µ—Å:* `%s`\n"+
				"*ID:* `%d`\n\n"+
				"–î–ª—è –∑–∞–∫–∞–∑–æ–≤ –Ω—É–∂–Ω—ã: –§–ò–û, –ê–¥—Ä–µ—Å –∏ –¢–µ–ª–µ—Ñ–æ–Ω",
			Utils.EscapeMarkdown(user.Name),
			Utils.EscapeMarkdown(user.Account),
			user.Discount,
			Utils.EscapeMarkdown(user.Phone),
			Utils.EscapeMarkdown(user.Address),
			user.ID,
		)
		// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞
		kb := tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				telego.InlineKeyboardButton{Text: "‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è", CallbackData: "change_name"},
			),
			tu.InlineKeyboardRow(
				telego.InlineKeyboardButton{Text: "üì± –°–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", CallbackData: "change_phone"},
			),
			tu.InlineKeyboardRow(
				telego.InlineKeyboardButton{Text: "üè† –°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", CallbackData: "change_address"},
			),
			tu.InlineKeyboardRow(
				telego.InlineKeyboardButton{Text: "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", CallbackData: "my_orders"},
			),
			tu.InlineKeyboardRow(
				telego.InlineKeyboardButton{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: "customer_menu"},
			),
		)

		_, err = bot.EditMessageText(ctx, &telego.EditMessageTextParams{
			ChatID:      chatID,
			MessageID:   messageID,
			Text:        text,
			ParseMode:   telego.ModeMarkdownV2,
			ReplyMarkup: kb,
		})

		if err != nil {
			log.Printf("Failed to edit cabinet message: %v", err)
		}

		return nil
	}, th.CallbackDataEqual("cabinet"))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	SetupEditHandlers(bh, db)
}

// SetupEditHandlers –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
func SetupEditHandlers(bh *th.BotHandler, db *sql.DB) {
	var state byte
	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		// –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ nil –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Cabinet
		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è
		_, err := bot.EditMessageText(ctx, &telego.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: messageID,
			Text:      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
		})

		if err != nil {
			log.Printf("Failed to request name change: %v", err)
		}
		state = stateEditingName
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å map –∏–ª–∏ –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
		return nil
	}, th.CallbackDataEqual("change_name"))

	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		// –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
		_, err := bot.EditMessageText(ctx, &telego.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: messageID,
			Text:      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º) (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):",
		})

		if err != nil {
			log.Printf("Failed to request phone change: %v", err)
		}

		state = stateEditingPhone
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
		return nil
	}, th.CallbackDataEqual("change_phone"))

	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		// –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
		bot := ctx.Bot()
		callback := update.CallbackQuery
		chatID := telego.ChatID{ID: callback.Message.GetChat().ID}
		messageID := callback.Message.GetMessageID()

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
		_, err := bot.EditMessageText(ctx, &telego.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: messageID,
			Text:      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 25):",
		})

		if err != nil {
			log.Printf("Failed to request address change: %v", err)
		}
		state = stateEditingAddress
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"
		return nil
	}, th.CallbackDataEqual("change_address"))

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	bh.Handle(func(ctx *th.Context, update telego.Update) error {
		if update.Message == nil || update.Message.From == nil {
			return nil
		}

		bot := ctx.Bot()
		userID := update.Message.From.ID
		chatID := telego.ChatID{ID: update.Message.Chat.ID}
		text := update.Message.Text
		contact := update.Message.Contact
		var phone string
		if contact != nil {
			phone = "+" + contact.PhoneNumber
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err := Users.GetByID(userID, db)
		if err != nil {
			log.Printf("Failed to get user: %v", err)
			return err
		}

		var successMessage string

		if state == stateEditingPhone {
			if strings.Contains(text, "+7") || regexp.MustCompile(`\d{11}`).MatchString(text) {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
				user.Phone = text
			} else if phone != "" {
				user.Phone = phone
			}
			successMessage = "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
			state = stateNormal
		} else if state == stateEditingAddress && len(text) > 20 && strings.Contains(text, ",") {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
			user.Address = text
			successMessage = "‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
			state = stateNormal
		} else if state == stateEditingName {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
			user.Name = text
			successMessage = "‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
			state = stateNormal
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
		if err := Users.Save(user, db); err != nil {
			log.Printf("Failed to save user: %v", err)
			_, _ = bot.SendMessage(ctx, &telego.SendMessageParams{
				ChatID: chatID,
				Text:   "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
			})
			return nil
		}

		if err != nil {
			log.Printf("Failed to send success message: %v", err)
		}
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–∞–±–∏–Ω–µ—Ç
		_, err = bot.SendMessage(ctx, &telego.SendMessageParams{
			ChatID: chatID,
			Text:   successMessage,
			ReplyMarkup: tu.InlineKeyboard(
				tu.InlineKeyboardRow(
					telego.InlineKeyboardButton{Text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç", CallbackData: "cabinet"},
				),
			),
		})

		return nil
	}, th.AnyMessage())
}
